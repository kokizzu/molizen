// Code generated by Molizen. DO NOT EDIT.

// Package actor_user is a generated Molizen package.
package actor_user

import (
	sync "sync"

	context0 "github.com/sanposhiho/molizen/context"
	future "github.com/sanposhiho/molizen/future"
	user "github.com/sanposhiho/molizen/playground/user"
)

// UserActor is a actor of User interface.
type UserActor struct {
	lock     sync.Mutex
	internal user.User
}

func New(internal user.User) *UserActor {
	return &UserActor{
		internal: internal,
	}
}

// GetAgeResult is the result type for GetAge.
type GetAgeResult struct {
	Ret0 int
}

// GetAge actor base method.
func (a *UserActor) GetAge(ctx context0.Context) *future.Future[GetAgeResult] {
	ctx.UnlockParent()
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[GetAgeResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		ret0 := a.internal.GetAge(newctx)

		ret := GetAgeResult{
			Ret0: ret0,
		}

		ctx.LockParent()

		f.Send(ret)
	}()

	return f
}

// IncrementAgeResult is the result type for IncrementAge.
type IncrementAgeResult struct {
}

// IncrementAge actor base method.
func (a *UserActor) IncrementAge(ctx context0.Context) *future.Future[IncrementAgeResult] {
	ctx.UnlockParent()
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[IncrementAgeResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.IncrementAge(newctx)

		ret := IncrementAgeResult{}

		ctx.LockParent()

		f.Send(ret)
	}()

	return f
}

// SayResult is the result type for Say.
type SayResult struct {
}

// Say actor base method.
func (a *UserActor) Say(ctx context0.Context, msg string) *future.Future[SayResult] {
	ctx.UnlockParent()
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[SayResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.Say(newctx, msg)

		ret := SayResult{}

		ctx.LockParent()

		f.Send(ret)
	}()

	return f
}

// SetAgeResult is the result type for SetAge.
type SetAgeResult struct {
}

// SetAge actor base method.
func (a *UserActor) SetAge(ctx context0.Context, age int) *future.Future[SetAgeResult] {
	ctx.UnlockParent()
	newctx := ctx.NewChildContext(a, a.lock.Lock, a.lock.Unlock)

	f := future.New[SetAgeResult]()
	go func() {
		a.lock.Lock()
		defer a.lock.Unlock()

		a.internal.SetAge(newctx, age)

		ret := SetAgeResult{}

		ctx.LockParent()

		f.Send(ret)
	}()

	return f
}
